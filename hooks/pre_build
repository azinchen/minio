#!/bin/bash

minio_arch()
{
    local target=$1
    if [[ $target == "x86_64" ]]; then
        platform=amd64
    elif [[ $target == "armhf" ]]; then
        platform=arm
    elif [[ $target == "aarch64" ]]; then
        platform=arm64
    elif [[ $target == "ppc64le" ]]; then
        platform=ppc64le
    fi
    echo $platform
}

minio_download_url()
{
    local target=$1
    echo https://dl.min.io/server/minio/release/linux-$(minio_arch $target)
}

qemu_static_arch()
{
    local target=$1
    if [[ $target == "armhf" ]]; then
        echo arm
    else
        echo $target
    fi
}

s6_overlay_arch()
{
    local target=$1
    if [[ $target == "x86_64" ]]; then
        echo amd64
    else
        echo $target
    fi
}

s6_overlay_url()
{
    local target=$1
    echo https://github.com/just-containers/s6-overlay/releases/latest/download/s6-overlay-$(s6_overlay_arch $target).tar.gz
}

alpine_base_image()
{
    local target=$1
    for index in ${!targets[*]}; do
        if [[ $target == ${targets[$index]} ]]; then
            echo ${alpine_base_images[$index]}
            return 0
        fi
    done
}

my_dir="$(dirname "${BASH_SOURCE[0]}")"
source "$my_dir/_env"

for target in ${targets[*]}; do
    if [[ ! ($target == "x86_64") ]]; then
        curl -Ls https://github.com/multiarch/qemu-user-static/releases/latest/download/x86_64_qemu-$(qemu_static_arch $target)-static.tar.gz | tar xzv
    fi
done

docker run --rm --privileged multiarch/qemu-user-static:register --reset

for target in ${targets[*]}; do
    target_file=Dockerfile.target-$target
    cp Dockerfile.template $target_file
    if [[ $target == "x86_64" ]]; then
        sed -i -- "/__QEMU_ARCH__/d" $target_file
    else
        sed -i -- "s/__QEMU_ARCH__/$(qemu_static_arch $target)/g" $target_file
    fi
    sed -i -- "s%__S6_OVERLAY__%$(s6_overlay_url $target)%g" $target_file
    sed -i -- "s%__MINIO_DOWNLOAD_URL__%$(minio_download_url $target)%g" $target_file
    sed -i -- "s%__BASEIMAGE__%$(alpine_base_image $target)%g" $target_file
done
